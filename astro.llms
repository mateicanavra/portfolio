TITLE: Generating Server-Side Routes from Astro Content Collections
DESCRIPTION: Shows how to create dynamic routes for server-side rendering using getEntry() to fetch content on-demand.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_20

LANGUAGE: astro
CODE:
---
import { getEntry, render } from "astro:content";
// 1. Get the slug from the incoming server request
const { id } = Astro.params;
if (id === undefined) {
	return Astro.redirect("/404");
}
// 2. Query for the entry directly using the request slug
const post = await getEntry("blog", id);
// 3. Redirect if the entry does not exist
if (post === undefined) {
	return Astro.redirect("/404");
}
// 4. Render the entry to HTML in the template
const { Content } = await render(post);
---
<h1>{post.data.title}</h1>
<Content />

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Shows how to compose components by using one component inside another. This example uses a Button component inside a ButtonGroup component, demonstrating component reusability.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_3

LANGUAGE: astro
CODE:
---
import Button from './Button.astro';
---
<div>
  <Button title="Button 1" />
  <Button title="Button 2" />
  <Button title="Button 3" />
</div>

----------------------------------------

TITLE: Component Props Definition and Usage
DESCRIPTION: Shows how to define and access props in an Astro component using the Astro.props global object. Props allow passing data to components making them reusable with different inputs.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_4

LANGUAGE: astro
CODE:
---
// src/components/GreetingHeadline.astro
// Usage: <GreetingHeadline greeting="Howdy" name="Partner" />
const { greeting, name } = Astro.props;
---
<h2>{greeting}, {name}!</h2>

----------------------------------------

TITLE: Configuring Astro for Deno
DESCRIPTION: Configuration changes required in astro.config.mjs to enable Deno adapter and server output
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/deno.mdx#2025-04-08_snippet_1

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';
import deno from '@deno/astro-adapter';

export default defineConfig({
  output: 'server',
  adapter: deno(),
});

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Shows how to compose components by using one component inside another. This example uses a Button component inside a ButtonGroup component, demonstrating component reusability.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_3

LANGUAGE: astro
CODE:
---
import Button from './Button.astro';
---
<div>
  <Button title="Button 1" />
  <Button title="Button 2" />
  <Button title="Button 3" />
</div>

----------------------------------------

TITLE: Component Props Definition and Usage
DESCRIPTION: Shows how to define and access props in an Astro component using the Astro.props global object. Props allow passing data to components making them reusable with different inputs.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_4

LANGUAGE: astro
CODE:
---
// src/components/GreetingHeadline.astro
// Usage: <GreetingHeadline greeting="Howdy" name="Partner" />
const { greeting, name } = Astro.props;
---
<h2>{greeting}, {name}!</h2>

----------------------------------------

TITLE: Implementing Form Submission Handler in React
DESCRIPTION: An enhanced React form component with a submit handler function that prevents default form submission, creates a FormData object from the form, sends it to the API endpoint using fetch, and displays the response message from the server.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms-api.mdx#2025-04-08_snippet_8

LANGUAGE: tsx
CODE:
import { useState } from "react";
import type { FormEvent } from "react";

export default function Form() {
  const [responseMessage, setResponseMessage] = useState("");

  async function submit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const response = await fetch("/api/feedback", {
      method: "POST",
      body: formData,
    });
    const data = await response.json();
    if (data.message) {
      setResponseMessage(data.message);
    }
  }

  return (
    <form onSubmit={submit}>
      <label htmlFor="name">
        Name
        <input type="text" id="name" name="name" autoComplete="name" required />
      </label>
      <label htmlFor="email">
        Email
        <input type="email" id="email" name="email" autoComplete="email" required />
      </label>
      <label htmlFor="message">
        Message
        <textarea id="message" name="message" autoComplete="off" required />
      </label>
      <button>Send</button>
      {responseMessage && <p>{responseMessage}</p>}
    </form>
  );
}

----------------------------------------

TITLE: Filtering Collection Entries in Astro
DESCRIPTION: Demonstrates how to use getCollection() to filter content entries based on properties like 'draft' status or nested directories.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_17

LANGUAGE: javascript
CODE:
import { getCollection } from 'astro:content';
const publishedBlogEntries = await getCollection('blog', ({ data }) => {
  return data.draft !== true;
});

LANGUAGE: javascript
CODE:
import { getCollection } from 'astro:content';
const blogEntries = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});

LANGUAGE: javascript
CODE:
import { getCollection } from 'astro:content';
const englishDocsEntries = await getCollection('docs', ({ id }) => {
  return id.startsWith('en/');
});

----------------------------------------

TITLE: Basic Middleware Implementation in JavaScript
DESCRIPTION: Demonstrates how to create a basic middleware function in Astro using JavaScript. The function intercepts requests, modifies the locals object, and returns the result of calling next().
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_0

LANGUAGE: javascript
CODE:
export function onRequest (context, next) {
    // intercept data from a request
    // optionally, modify the properties in `locals`
    context.locals.title = "New title";

    // return a Response or the result of calling `next()`
    return next();
};

----------------------------------------

TITLE: Fetching Data in Astro Component
DESCRIPTION: Demonstrates fetching user data from an API endpoint and passing it to child components. Shows how to use top-level await with fetch and handle JSON responses in Astro components.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_0

LANGUAGE: astro
CODE:
---
// src/components/User.astro
import Contact from "../components/Contact.jsx";
import Location from "../components/Location.astro";

const response = await fetch("https://randomuser.me/api/");
const data = await response.json();
const randomUser = data.results[0];
---
<!-- Data fetched at build can be rendered in HTML -->
<h1>User</h1>
<h2>{randomUser.name.first} {randomUser.name.last}</h2>

<!-- Data fetched at build can be passed to components as props -->
<Contact client:load email={randomUser.email} />
<Location city={randomUser.location.city} />

----------------------------------------

TITLE: Installing Deno Adapter with Package Managers
DESCRIPTION: Commands for installing the Deno adapter using different package managers (npm, pnpm, yarn)
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/deno.mdx#2025-04-08_snippet_0

LANGUAGE: shell
CODE:
npm install @deno/astro-adapter

LANGUAGE: shell
CODE:
pnpm install @deno/astro-adapter

LANGUAGE: shell
CODE:
yarn add @deno/astro-adapter

----------------------------------------

TITLE: Fetching Data in Astro Component
DESCRIPTION: Demonstrates fetching user data from an API endpoint and passing it to child components. Shows how to use top-level await with fetch and handle JSON responses in Astro components.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_0

LANGUAGE: astro
CODE:
---
// src/components/User.astro
import Contact from "../components/Contact.jsx";
import Location from "../components/Location.astro";

const response = await fetch("https://randomuser.me/api/");
const data = await response.json();
const randomUser = data.results[0];
---
<!-- Data fetched at build can be rendered in HTML -->
<h1>User</h1>
<h2>{randomUser.name.first} {randomUser.name.last}</h2>

<!-- Data fetched at build can be passed to components as props -->
<Contact client:load email={randomUser.email} />
<Location city={randomUser.location.city} />

----------------------------------------

TITLE: Implementing Feedback Form Component in Vue
DESCRIPTION: A Vue component implementing a feedback form that submits data to a server endpoint. It includes form elements for name, email, and message, with a submit handler that prevents default form submission, collects form data, and displays a response message from the server.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms-api.mdx#2025-04-08_snippet_11

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { ref } from "vue";

const responseMessage = ref<string>();

async function submit(e: Event) {
  e.preventDefault();
  const formData = new FormData(e.currentTarget as HTMLFormElement);
  const response = await fetch("/api/feedback", {
    method: "POST",
    body: formData,
  });
  const data = await response.json();
  responseMessage.value = data.message;
}
</script>

<template>
  <form @submit="submit">
    <label>
      Name
      <input type="text" id="name" name="name" required />
    </label>
    <label>
      Email
      <input type="email" id="email" name="email" required />
    </label>
    <label>
      Message
      <textarea id="message" name="message" required />
    </label>
    <button>Send</button>
    <p v-if="responseMessage">{{ responseMessage }}</p>
  </form>
</template>

----------------------------------------

TITLE: GraphQL Query in Astro Component
DESCRIPTION: Demonstrates making a GraphQL query to fetch Star Wars film data using fetch API with POST method. Shows how to handle query variables and response parsing.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_2

LANGUAGE: astro
CODE:
---
const response = await fetch(
  "https://swapi-graphql.netlify.app/.netlify/functions/index",
  {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: `
        query getFilm ($id:ID!) {
          film(id: $id) {
            title
            releaseDate
          }
        }
      `,
      variables: {
        id: "ZmlsbXM6MQ==",
      },
    }),
  }
);


const json = await response.json();
const { film } = json.data;
---
<h1>Fetching information about Star Wars: A New Hope</h1>
<h2>Title: {film.title}</h2>
<p>Year: {film.releaseDate}</p>

----------------------------------------

TITLE: Accessing Props from getStaticPaths in Astro Routes
DESCRIPTION: Demonstrates how to access props data passed from getStaticPaths when generating static routes in Astro. Shows usage in both .astro files and API endpoints.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_1

LANGUAGE: astro
CODE:
---
export function getStaticPaths() {
  return [
    { params: { id: '1' }, props: { author: 'Blu' } },
    { params: { id: '2' }, props: { author: 'Erika' } },
    { params: { id: '3' }, props: { author: 'Matthew' } }
  ];
}

const { id } = Astro.params;
const { author } = Astro.props;
---

LANGUAGE: typescript
CODE:
import type { APIContext } from 'astro';

export function getStaticPaths() {
  return [
    { params: { id: '1' }, props: { author: 'Blu' } },
    { params: { id: '2' }, props: { author: 'Erika' } },
    { params: { id: '3' }, props: { author: 'Matthew' } }
  ];
}

export function GET({ props }: APIContext) {
  return new Response(
    JSON.stringify({ author: props.author }),
  );
}

----------------------------------------

TITLE: Rendering Markdown Content in Astro Templates
DESCRIPTION: Shows how to render Markdown or MDX content in an Astro template using the render() function, which provides a Content component and heading metadata.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_14

LANGUAGE: astro
CODE:
---
import { getEntry, render } from 'astro:content';

const entry = await getEntry('blog', 'post-1');
if (!entry) {
  // Handle Error, for example:
  throw new Error('Could not find blog post 1');
}
const { Content, headings } = await render(entry);
---
<p>Published on: {entry.data.published.toDateString()}</p>
<Content />

----------------------------------------

TITLE: Adding Tag Index to Navigation in Astro
DESCRIPTION: Updates the site navigation component to include a link to the newly created tag index page, making it accessible from other pages in the website.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/3.mdx#2025-04-08_snippet_9

LANGUAGE: astro
CODE:
<a href="/">Home</a>
<a href="/about/">About</a>
<a href="/blog/">Blog</a>
<a href="/tags/">Tags</a>

----------------------------------------

TITLE: Defining Astro File Interface in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for Astro files, including properties for file path, URL, and the default AstroComponentFactory.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_28

LANGUAGE: typescript
CODE:
export interface AstroInstance {
  /* The file path of this file */
  file: string;
  /* The URL for this file (if it is in the pages directory) */
	url: string | undefined;
	default: AstroComponentFactory;
}

----------------------------------------

TITLE: Using Custom Shiki Theme in Astro Configuration
DESCRIPTION: This snippet shows how to import and use a custom Shiki theme file in the Astro configuration for syntax highlighting.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/guides/markdown-content.mdx#2025-04-08_snippet_5

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import temaCustomizado from './meu-tema-shiki.json';

export default defineConfig({
  markdown: {
    shikiConfig: { theme: temaCustomizado },
  },
});

----------------------------------------

TITLE: Accessing Environment Variables in Astro Components
DESCRIPTION: This code snippet shows how to access environment variables in Astro components using import.meta.env, demonstrating both server-only and public variables in different contexts.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_10

LANGUAGE: javascript
CODE:
// When import.meta.env.SSR === true
const data = await db(import.meta.env.DB_PASSWORD);

// When import.meta.env.SSR === false
const data = fetch(`${import.meta.env.PUBLIC_POKEAPI}/pokemon/squirtle`);

----------------------------------------

TITLE: Rendering Content Collection Entries with render() Function
DESCRIPTION: Shows how to use the render() function to compile a collection entry for rendering in an Astro component. This provides access to the Content component, headings, and modified frontmatter.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_6

LANGUAGE: astro
CODE:
---
import { getEntry, render } from 'astro:content';
const entry = await getEntry('blog', 'entry-1');

if (!entry) {
   // Handle Error, for example:
  throw new Error('Could not find blog post 1');
}
const { Content, headings, remarkPluginFrontmatter } = await render(entry);
---

----------------------------------------

TITLE: Complete SSR Blog Post Page with Error Handling
DESCRIPTION: This is a complete implementation of a server-side rendered blog post page in Astro. It fetches the post by slug, handles errors, processes the data, and renders the post with optional chaining for safety.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_13

LANGUAGE: astro
CODE:
---
import Layout from "../../layouts/Layout.astro";
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { BlogPost } from "../../lib/contentful";

let post;
const { slug } = Astro.params;
try {
  const data = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
    "fields.slug": slug,
  });
  const { title, date, content } = data.items[0].fields;
  post = {
    title,
    date: new Date(date).toLocaleDateString(),
    content: documentToHtmlString(content),
  };
} catch (error) {
  return Astro.redirect("/404");
}
---
<html lang="en">
  <head>
    <title>{post?.title}</title>
  </head>
  <body>
    <h1>{post?.title}</h1>
    <time>{post?.date}</time>
    <article set:html={post?.content} />
  </body>
</html>

----------------------------------------

TITLE: GraphQL Query in Astro Component
DESCRIPTION: Demonstrates making a GraphQL query to fetch Star Wars film data using fetch API with POST method. Shows how to handle query variables and response parsing.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_2

LANGUAGE: astro
CODE:
---
const response = await fetch(
  "https://swapi-graphql.netlify.app/.netlify/functions/index",
  {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: `
        query getFilm ($id:ID!) {
          film(id: $id) {
            title
            releaseDate
          }
        }
      `,
      variables: {
        id: "ZmlsbXM6MQ==",
      },
    }),
  }
);


const json = await response.json();
const { film } = json.data;
---
<h1>Fetching information about Star Wars: A New Hope</h1>
<h2>Title: {film.title}</h2>
<p>Year: {film.releaseDate}</p>

----------------------------------------

TITLE: Zod Schema Types Cheatsheet for Astro Content Collections
DESCRIPTION: Example demonstrating various Zod data types that can be used when defining content collection schemas in Astro, including primitives, transforms, and validation.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_8

LANGUAGE: typescript
CODE:
// Example: A cheatsheet of many common Zod datatypes
import { z, defineCollection } from 'astro:content';

defineCollection({
  schema: z.object({
    isDraft: z.boolean(),
    title: z.string(),
    sortOrder: z.number(),
    image: z.object({
      src: z.string(),
      alt: z.string(),
    }),
    author: z.string().default('Anonymous'),
    language: z.enum(['en', 'es']),
    tags: z.array(z.string()),
    footnote: z.string().optional(),

    // In YAML, dates written without quotes around them are interpreted as Date objects
    publishDate: z.date(), // e.g. 2024-09-17

    // Transform a date string (e.g. "2022-07-08") to a Date object
    updatedDate: z.string().transform((str) => new Date(str)),

    authorContact: z.string().email(),
    canonicalURL: z.string().url(),
  })
})

----------------------------------------

TITLE: Importing Multiple Files with import.meta.glob() in Astro
DESCRIPTION: Example of using Vite's import.meta.glob() to import all Markdown files from a directory with eager loading. The snippet demonstrates importing blog posts and rendering articles from their frontmatter.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_9

LANGUAGE: astro
CODE:
---
// imports all files that end with `.md` in `./src/pages/post/`
const matches = import.meta.glob('../pages/post/*.md', { eager: true }); 
const posts = Object.values(matches);
---
<!-- Renders an <article> for the first 5 blog posts -->
<div>
{posts.slice(0, 4).map((post) => (
  <article>
    <h2>{post.frontmatter.title}</h2>
    <p>{post.frontmatter.description}</p>
    <a href={post.url}>Read more</a>
  </article>
))}
</div>

----------------------------------------

TITLE: Configuring TypeScript for Content Collections in Astro
DESCRIPTION: Required TypeScript configuration in tsconfig.json to enable Zod validation, Intellisense, and type checking for content collections. Includes required compiler options for Astro content collections.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_0

LANGUAGE: json
CODE:
{
  // Included with "astro/tsconfigs/strict" or "astro/tsconfigs/strictest"
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "strictNullChecks": true, // add if using `base` template
    "allowJs": true // required, and included with all Astro templates
  }
}